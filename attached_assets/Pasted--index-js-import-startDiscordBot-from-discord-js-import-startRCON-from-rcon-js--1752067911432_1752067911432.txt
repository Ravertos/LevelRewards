// index.js:
import { startDiscordBot } from './discord.js';
import { startRCON } from './rcon.js';

startDiscordBot();
startRCON();

// config.js:
import dotenv from 'dotenv';
dotenv.config();

export default {
  deepseek_api_key: process.env.DEEPSEEK_API_KEY,
  deepseek_model: "deepseek-chat",
  discord_token: process.env.DISCORD_TOKEN,
  discord_channel_id: process.env.DISCORD_CHANNEL_ID,
  rcon_host: process.env.RCON_HOST,
  rcon_port: parseInt(process.env.RCON_PORT),
  rcon_password: process.env.RCON_PASSWORD,
  system_prompt: "Du bist eine Assistenz-KI f√ºr einen ARK-Server und Discord-Bot. Du hilfst bei Fehlern, Fragen und fehlenden Infos mit L√∂sungsvorschl√§gen."
};

// ai.js:
import axios from 'axios';
import config from './config.js';

export async function askDeepSeek(messageHistory) {
  try {
    const response = await axios.post(
      'https://openrouter.ai/api/v1/chat/completions',
      {
        model: config.deepseek_model,
        messages: messageHistory
      },
      {
        headers: {
          'Authorization': `Bearer ${config.deepseek_api_key}`,
          'Content-Type': 'application/json'
        }
      }
    );

    return response.data.choices[0].message.content;
  } catch (error) {
    console.error("‚ùå Fehler bei Anfrage an DeepSeek:", error.response?.data || error.message);
    return "Ein Fehler ist bei der Kommunikation mit der KI aufgetreten.";
  }
}

// eventHandler.js:
import { askDeepSeek } from './ai.js';
import config from './config.js';

const messageHistory = [
  { role: "system", content: config.system_prompt }
];

export async function handleEvent({ type, content }) {
  const promptMap = {
    error: `Fehler erkannt: ${content}`,
    missing_info: `Es fehlt etwas: ${content}`,
    user_question: `Frage vom User: ${content}`,
    rcon_log: `Spielserver Log: ${content}`
  };

  const userPrompt = promptMap[type] || `Unbekanntes Event: ${JSON.stringify(content)}`;
  messageHistory.push({ role: "user", content: userPrompt });

  const aiReply = await askDeepSeek(messageHistory);
  messageHistory.push({ role: "assistant", content: aiReply });

  return aiReply;
}

// discord.js:
import { Client, GatewayIntentBits } from 'discord.js';
import config from './config.js';
import { handleEvent } from './eventHandler.js';

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent] });

client.once('ready', () => {
  console.log(`‚úÖ Discord-Bot online: ${client.user.tag}`);
});

client.on('messageCreate', async (message) => {
  if (message.channel.id !== config.discord_channel_id || message.author.bot) return;

  const reply = await handleEvent({ type: "user_question", content: message.content });
  await message.reply(`ü§ñ ${reply}`);
});

export function sendToDiscord(content) {
  const channel = client.channels.cache.get(config.discord_channel_id);
  if (channel) channel.send(content);
}

export function startDiscordBot() {
  client.login(config.discord_token);
}

// rcon.js:
import { Rcon } from 'rcon-client';
import config from './config.js';
import { handleEvent } from './eventHandler.js';
import { sendToDiscord } from './discord.js';

export async function startRCON() {
  const rcon = await Rcon.connect({
    host: config.rcon_host,
    port: config.rcon_port,
    password: config.rcon_password
  });

  console.log("üõ† RCON verbunden.");

  rcon.on('message', async (msg) => {
    console.log(`[RCON] ${msg}`);

    if (msg.includes("error") || msg.includes("failed") || msg.includes("disconnected")) {
      const aiResponse = await handleEvent({ type: "rcon_log", content: msg });
      sendToDiscord(`‚ö†Ô∏è KI-Vorschlag zum RCON-Log: ${aiResponse}`);
    }
  });

  await rcon.send('ServerChat RCON verbunden mit KI-System');
}

// .env (Replit "Secrets" oder Datei):
// Diese Datei nicht im Code einf√ºgen, sondern in Replit unter "üîê Secrets" anlegen
// Schl√ºssel:        Wert:
DEEPSEEK_API_KEY=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
DISCORD_TOKEN=dein-discord-token
DISCORD_CHANNEL_ID=dein-discord-channel-id
RCON_HOST=127.0.0.1
RCON_PORT=27020
RCON_PASSWORD=dein-rcon-passwort

// package.json:
{
  "name": "my-smart-bot",
  "version": "1.0.0",
  "type": "module",
  "main": "index.js",
  "scripts": {
    "start": "node index.js"
  },
  "dependencies": {
    "discord.js": "^14.11.0",
    "rcon-client": "^5.1.1",
    "axios": "^1.6.0",
    "dotenv": "^16.4.5"
  }
}